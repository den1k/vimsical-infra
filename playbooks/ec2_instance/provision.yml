---
# ec2 instance provisioning
#

# TODO Figure out jump hosts for private subnets
# TODO do not assign public ip by default and setup jump host forwarding
# TODO remove ssh group from non-bastion hosts

- hosts: localhost
  connection: local
  gather_facts: false
  vars:
    image: "{{ aws_ami_ssd }}"
    region: "{{ aws_region }}"
    key_name: "{{ aws_key_name }}"
    termination_protection: false
    monitoring: true
    count: 1
    wait: true
    public: true
  tags:
    - provision
  tasks:
    - name: launch "{{ group_name }}" instance(s)
      ec2:
        key_name: "{{ key_name }}"
        instance_type: "{{ instance_type }}"
        image: "{{ image }}"
        group: "{{ group }}"
        assign_public_ip: "{{ public }}"
        vpc_subnet_id: "{{ vpc_subnet_id }}"
        region: "{{ region }}"
        monitoring: "{{ monitoring }}"
        termination_protection: "{{ termination_protection }}"
        instance_tags:
          Group: "{{ group_name }}"
          Environment: "{{ env_name }}"
        exact_count: "{{ count }}"
        count_tag:
          Group: "{{ group_name }}"
          Environment: "{{ env_name }}"
        wait: "{{ wait }}"
      register: ec2

    - name: wait for ssh
      wait_for:
        state: started
        host: "{{ item.public_ip }}"
        port: 22
        timeout: 300
      with_items: "{{ ec2.tagged_instances }}"
      when: "{{ wait and ec2.changed }}"

    - name: refresh inventory cache
      command: "{{ dynamic_inventory_file }} --refresh-cache"
      when: "{{ ec2.changed }}"

    - name: refresh inventory
      meta: refresh_inventory
      when: "{{ ec2.changed }}"

- hosts: "{{ group_name }}"
  become: true
  gather_facts: false
  tags:
    - provision
  pre_tasks:
    - name: install python2
      raw: sudo apt-get install -y python-simplejson
      when: "{{ ec2.changed }}"
  roles:
    - { role: ubuntu, when: "{{ ec2.changed }}" }

# Destroy ec2 instance(s)
#

- hosts: localhost
  connection: local
  gather_facts: false
  vars:
    image: "{{ aws_ami_ssd }}"
    region: "{{ aws_region }}"
    key_name: "{{ aws_key_name }}"
    wait: true
  tags:
    - destroy
  tasks:
    - name: destroy "{{ group_name }}" instance(s)
      ec2:
        group: "{{ security_groups }}"
        region: "{{ region }}"
        wait: "{{ wait }}"
        image: "{{ image }}"
        exact_count: 0
        count_tag:
          Group: "{{ group_name }}"
          Environment: "{{ env_name }}"
