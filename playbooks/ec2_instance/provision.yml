---
# ec2 instance provisioning
#

# TODO Figure out jump hosts for private subnets
# TODO do not assign public ip by default and setup jump host forwarding
# TODO remove ssh group from non-bastion hosts

- name: "provision {{ name }}"
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    image: "{{ aws_ami_ssd }}"
    region: "{{ aws_region }}"
    key_name: "{{ aws_key_name }}"
    termination_protection: false
    monitoring: true
    count: 1
    wait: true
    public: true
  tags:
    - provision
  tasks:
    - name: launch {{ group_name }} instance(s)
      ec2:
        key_name: "{{ key_name }}"
        instance_type: "{{ instance_type }}"
        image: "{{ image }}"
        group: "{{ security_groups }}"
        assign_public_ip: "{{ public }}"
        vpc_subnet_id: "{{ vpc_subnet_id }}"
        region: "{{ region }}"
        monitoring: "{{ monitoring }}"
        termination_protection: "{{ termination_protection }}"
        instance_tags:
          Name: "{{ group_name }}"
          Group: "{{ group_name }}"
          Environment: "{{ env_name }}"
        exact_count: "{{ count }}"
        count_tag:
          Name: "{{ name }}"
          Group: "{{ group_name }}"
          Environment: "{{ env_name }}"
        wait: "{{ wait }}"
      register: ec2

    - name: wait for ssh
      wait_for:
        state: started
        host: "{{ item.public_ip }}"
        port: 22
        timeout: 300
      with_items: "{{ ec2.tagged_instances }}"
      when: wait and ec2.changed

    - name: add to launched group
      add_host:
        name: "{{ item.public_ip }}"
        groups: launched
      with_items: "{{ ec2.tagged_instances }}"
      when: ec2.changed

    - name: refresh inventory cache
      shell: "{{ dynamic_inventory_file }} --refresh-cache > /dev/null"
      when: ec2.changed

- name: install managed node dependencies
  hosts: launched
  become: yes
  remote_user: root
  gather_facts: no # this is critical
  tags:
    - provision
  pre_tasks:
    - raw: sudo apt-get install -y python-simplejson
  roles:
    - { role: ubuntu }

# Destroy ec2 instance(s)
#

- hosts: localhost
  connection: local
  gather_facts: false
  vars:
    image: "{{ aws_ami_ssd }}"
    region: "{{ aws_region }}"
    key_name: "{{ aws_key_name }}"
    wait: true
  tags:
    - destroy
  tasks:
    - name: "destroy {{ group_name }} instance(s)"
      ec2:
        group: "{{ security_groups }}"
        region: "{{ region }}"
        wait: "{{ wait }}"
        image: "{{ image }}"
        exact_count: 0
        count_tag:
          Name: "{{ name }}"
          Group: "{{ group_name }}"
          Environment: "{{ env_name }}"
